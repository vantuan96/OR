//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace DataAccess.Models
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class Entities : DbContext
    {
        public Entities(string connStr)
            : base("name=" + connStr)
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<AdminAction> AdminActions { get; set; }
        public virtual DbSet<AdminController> AdminControllers { get; set; }
        public virtual DbSet<AdminDepartment> AdminDepartments { get; set; }
        public virtual DbSet<AdminGroupAction> AdminGroupActions { get; set; }
        public virtual DbSet<AdminGroupAction_Map> AdminGroupAction_Map { get; set; }
        public virtual DbSet<AdminRole> AdminRoles { get; set; }
        public virtual DbSet<AdminRole_GroupAction> AdminRole_GroupAction { get; set; }
        public virtual DbSet<AdminUser_Action_Default> AdminUser_Action_Default { get; set; }
        public virtual DbSet<AdminUser_Action_Deny> AdminUser_Action_Deny { get; set; }
        public virtual DbSet<AdminUser_Location> AdminUser_Location { get; set; }
        public virtual DbSet<AdminUser_LoginHistory> AdminUser_LoginHistory { get; set; }
        public virtual DbSet<AdminUser_Microsite> AdminUser_Microsite { get; set; }
        public virtual DbSet<AdminUser_PlusAction> AdminUser_PlusAction { get; set; }
        public virtual DbSet<AdminUser_PnL> AdminUser_PnL { get; set; }
        public virtual DbSet<AdminUser_PnL_Site> AdminUser_PnL_Site { get; set; }
        public virtual DbSet<AdminUser_Role> AdminUser_Role { get; set; }
        public virtual DbSet<AdminUser> AdminUsers { get; set; }
        public virtual DbSet<AdminUserTracking> AdminUserTrackings { get; set; }
        public virtual DbSet<Device> Devices { get; set; }
        public virtual DbSet<Location> Locations { get; set; }
        public virtual DbSet<Microsite> Microsites { get; set; }
        public virtual DbSet<SystemSetting> SystemSettings { get; set; }
        public virtual DbSet<SystemRuntimeLog> SystemRuntimeLogs { get; set; }
        public virtual DbSet<CheckListMap> CheckListMaps { get; set; }
        public virtual DbSet<CheckListSystem> CheckListSystems { get; set; }
        public virtual DbSet<PersonnelEvaluation> PersonnelEvaluations { get; set; }
        public virtual DbSet<CheckListDetail> CheckListDetails { get; set; }
        public virtual DbSet<CheckListStatu> CheckListStatus { get; set; }
        public virtual DbSet<CheckListType> CheckListTypes { get; set; }
        public virtual DbSet<DepartmentList> DepartmentLists { get; set; }
        public virtual DbSet<PnLList> PnLLists { get; set; }
        public virtual DbSet<BigSiteList> BigSiteLists { get; set; }
        public virtual DbSet<SiteList> SiteLists { get; set; }
        public virtual DbSet<SiteOpeningList> SiteOpeningLists { get; set; }
        public virtual DbSet<AppList> AppLists { get; set; }
        public virtual DbSet<PnLListStatu> PnLListStatus { get; set; }
        public virtual DbSet<PnLBUList> PnLBULists { get; set; }
        public virtual DbSet<Employee> Employees { get; set; }
        public virtual DbSet<DepartmentType> DepartmentTypes { get; set; }
        public virtual DbSet<DepartmentGeneral> DepartmentGenerals { get; set; }
        public virtual DbSet<DepartmentStatu> DepartmentStatus { get; set; }
        public virtual DbSet<DepartmentTitle> DepartmentTitles { get; set; }
        public virtual DbSet<StaffList> StaffLists { get; set; }
        public virtual DbSet<AdministrativeUnit> AdministrativeUnits { get; set; }
        public virtual DbSet<BasisGroup> BasisGroups { get; set; }
        public virtual DbSet<Level> Levels { get; set; }
        public virtual DbSet<AdministrativePrefix> AdministrativePrefixes { get; set; }
        public virtual DbSet<PnLBuAttributeGroup> PnLBuAttributeGroups { get; set; }
        public virtual DbSet<Basis> Bases { get; set; }
        public virtual DbSet<PnLBuAttribute> PnLBuAttributes { get; set; }
        public virtual DbSet<Region> Regions { get; set; }
        public virtual DbSet<BasisStaff_Map> BasisStaff_Map { get; set; }
        public virtual DbSet<BasisStatu> BasisStatus { get; set; }
        public virtual DbSet<SystemDataChangeLog> SystemDataChangeLogs { get; set; }
        public virtual DbSet<SystemDataChangeLogDetail> SystemDataChangeLogDetails { get; set; }
        public virtual DbSet<AdminUser_System> AdminUser_System { get; set; }
        public virtual DbSet<CheckListItem> CheckListItems { get; set; }
        public virtual DbSet<CheckListItemMap> CheckListItemMaps { get; set; }
        public virtual DbSet<CheckListOperationMapping> CheckListOperationMappings { get; set; }
        public virtual DbSet<CheckList> CheckLists { get; set; }
        public virtual DbSet<CateSystem> CateSystems { get; set; }
        public virtual DbSet<SubCateSystem> SubCateSystems { get; set; }
        public virtual DbSet<SystemCheckList> SystemCheckLists { get; set; }
        public virtual DbSet<CheckListOperationLog> CheckListOperationLogs { get; set; }
        public virtual DbSet<CheckListOperation> CheckListOperations { get; set; }
        public virtual DbSet<LogObject> LogObjects { get; set; }
        public virtual DbSet<Patient> Patients { get; set; }
        public virtual DbSet<PatientState> PatientStates { get; set; }
        public virtual DbSet<RoomHospital> RoomHospitals { get; set; }
        public virtual DbSet<BlockTime> BlockTimes { get; set; }
        public virtual DbSet<AdminUser_PnL_DepartmentSite> AdminUser_PnL_DepartmentSite { get; set; }
        public virtual DbSet<HospitalSite> HospitalSites { get; set; }
        public virtual DbSet<HpService> HpServices { get; set; }
        public virtual DbSet<ORAnesthProgress> ORAnesthProgresses { get; set; }
        public virtual DbSet<ORMappingService> ORMappingServices { get; set; }
        public virtual DbSet<OROperationLink> OROperationLinks { get; set; }
        public virtual DbSet<ORRoom> ORRooms { get; set; }
        public virtual DbSet<ORMappingEkip> ORMappingEkips { get; set; }
        public virtual DbSet<ORPositionType> ORPositionTypes { get; set; }
        public virtual DbSet<ORTracking> ORTrackings { get; set; }
        public virtual DbSet<ORUserInfor_Position> ORUserInfor_Position { get; set; }
        public virtual DbSet<ORUserInfo> ORUserInfoes { get; set; }
        public virtual DbSet<tblLichHen_Temp> tblLichHen_Temp { get; set; }
        public virtual DbSet<vw_PlanORRoom> vw_PlanORRoom { get; set; }
        public virtual DbSet<Department> Departments { get; set; }
        public virtual DbSet<ServiceGroup> ServiceGroups { get; set; }
        public virtual DbSet<ReportPatient> ReportPatients { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<APIClient_Get_ThongTinPhongBan_V01_Result> APIClient_Get_ThongTinPhongBan_V01()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APIClient_Get_ThongTinPhongBan_V01_Result>("APIClient_Get_ThongTinPhongBan_V01");
        }
    
        public virtual int APIClient_Get_ThongTinPhongMo_V01(ObjectParameter outMst)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("APIClient_Get_ThongTinPhongMo_V01", outMst);
        }
    
        public virtual ObjectResult<APIClient_Get_Endo_ListPatient_Result> APIClient_Get_Endo_ListPatient(Nullable<System.DateTime> tuNgay, Nullable<System.DateTime> denNgay)
        {
            var tuNgayParameter = tuNgay.HasValue ?
                new ObjectParameter("TuNgay", tuNgay) :
                new ObjectParameter("TuNgay", typeof(System.DateTime));
    
            var denNgayParameter = denNgay.HasValue ?
                new ObjectParameter("DenNgay", denNgay) :
                new ObjectParameter("DenNgay", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<APIClient_Get_Endo_ListPatient_Result>("APIClient_Get_Endo_ListPatient", tuNgayParameter, denNgayParameter);
        }
    
        public virtual int APIClient_Get_ThongTinPhongMo_V011(ObjectParameter outMst)
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("APIClient_Get_ThongTinPhongMo_V011", outMst);
        }
    
        public virtual ObjectResult<Core_CheckExistORRegistor_Result> Core_CheckExistORRegistor(Nullable<int> id, Nullable<System.DateTime> dtFrom, Nullable<System.DateTime> dtTo, Nullable<int> oRRoomId, Nullable<int> hpServiceId, string hospitalCode, Nullable<int> currentUserId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var dtFromParameter = dtFrom.HasValue ?
                new ObjectParameter("dtFrom", dtFrom) :
                new ObjectParameter("dtFrom", typeof(System.DateTime));
    
            var dtToParameter = dtTo.HasValue ?
                new ObjectParameter("dtTo", dtTo) :
                new ObjectParameter("dtTo", typeof(System.DateTime));
    
            var oRRoomIdParameter = oRRoomId.HasValue ?
                new ObjectParameter("ORRoomId", oRRoomId) :
                new ObjectParameter("ORRoomId", typeof(int));
    
            var hpServiceIdParameter = hpServiceId.HasValue ?
                new ObjectParameter("HpServiceId", hpServiceId) :
                new ObjectParameter("HpServiceId", typeof(int));
    
            var hospitalCodeParameter = hospitalCode != null ?
                new ObjectParameter("HospitalCode", hospitalCode) :
                new ObjectParameter("HospitalCode", typeof(string));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Core_CheckExistORRegistor_Result>("Core_CheckExistORRegistor", idParameter, dtFromParameter, dtToParameter, oRRoomIdParameter, hpServiceIdParameter, hospitalCodeParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<Core_CheckExistPositionByScheduler_Result> Core_CheckExistPositionByScheduler(Nullable<int> id, Nullable<int> uId)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("Id", id) :
                new ObjectParameter("Id", typeof(int));
    
            var uIdParameter = uId.HasValue ?
                new ObjectParameter("UId", uId) :
                new ObjectParameter("UId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Core_CheckExistPositionByScheduler_Result>("Core_CheckExistPositionByScheduler", idParameter, uIdParameter);
        }
    
        public virtual ObjectResult<FindMyData_String_Result> FindMyData_String(string dataToFind, Nullable<bool> exactMatch)
        {
            var dataToFindParameter = dataToFind != null ?
                new ObjectParameter("DataToFind", dataToFind) :
                new ObjectParameter("DataToFind", typeof(string));
    
            var exactMatchParameter = exactMatch.HasValue ?
                new ObjectParameter("ExactMatch", exactMatch) :
                new ObjectParameter("ExactMatch", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<FindMyData_String_Result>("FindMyData_String", dataToFindParameter, exactMatchParameter);
        }
    
        public virtual ObjectResult<Get_EKip_OR_SP_Result> Get_EKip_OR_SP(Nullable<int> pid, string service_code)
        {
            var pidParameter = pid.HasValue ?
                new ObjectParameter("pid", pid) :
                new ObjectParameter("pid", typeof(int));
    
            var service_codeParameter = service_code != null ?
                new ObjectParameter("service_code", service_code) :
                new ObjectParameter("service_code", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Get_EKip_OR_SP_Result>("Get_EKip_OR_SP", pidParameter, service_codeParameter);
        }
    
        public virtual ObjectResult<OR_Get_AnesthProgress_Result> OR_Get_AnesthProgress(Nullable<System.DateTime> dtFrom, Nullable<System.DateTime> dtTo, Nullable<int> state, string keyWord, Nullable<int> oRRoomId, Nullable<int> hpServiceId, string hospitalCode, Nullable<int> sourceClientId, Nullable<int> currentUserId, Nullable<int> isDashboard, string username)
        {
            var dtFromParameter = dtFrom.HasValue ?
                new ObjectParameter("dtFrom", dtFrom) :
                new ObjectParameter("dtFrom", typeof(System.DateTime));
    
            var dtToParameter = dtTo.HasValue ?
                new ObjectParameter("dtTo", dtTo) :
                new ObjectParameter("dtTo", typeof(System.DateTime));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var keyWordParameter = keyWord != null ?
                new ObjectParameter("KeyWord", keyWord) :
                new ObjectParameter("KeyWord", typeof(string));
    
            var oRRoomIdParameter = oRRoomId.HasValue ?
                new ObjectParameter("ORRoomId", oRRoomId) :
                new ObjectParameter("ORRoomId", typeof(int));
    
            var hpServiceIdParameter = hpServiceId.HasValue ?
                new ObjectParameter("HpServiceId", hpServiceId) :
                new ObjectParameter("HpServiceId", typeof(int));
    
            var hospitalCodeParameter = hospitalCode != null ?
                new ObjectParameter("HospitalCode", hospitalCode) :
                new ObjectParameter("HospitalCode", typeof(string));
    
            var sourceClientIdParameter = sourceClientId.HasValue ?
                new ObjectParameter("SourceClientId", sourceClientId) :
                new ObjectParameter("SourceClientId", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            var isDashboardParameter = isDashboard.HasValue ?
                new ObjectParameter("IsDashboard", isDashboard) :
                new ObjectParameter("IsDashboard", typeof(int));
    
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OR_Get_AnesthProgress_Result>("OR_Get_AnesthProgress", dtFromParameter, dtToParameter, stateParameter, keyWordParameter, oRRoomIdParameter, hpServiceIdParameter, hospitalCodeParameter, sourceClientIdParameter, currentUserIdParameter, isDashboardParameter, usernameParameter);
        }
    
        public virtual ObjectResult<OR_Get_AnesthProgress_PublicInfo_Result> OR_Get_AnesthProgress_PublicInfo(Nullable<System.DateTime> dtFrom, Nullable<System.DateTime> dtTo, Nullable<int> state, string keyWord, Nullable<int> oRRoomId, Nullable<int> hpServiceId, string hospitalCode, Nullable<int> sourceClientId, Nullable<int> currentUserId)
        {
            var dtFromParameter = dtFrom.HasValue ?
                new ObjectParameter("dtFrom", dtFrom) :
                new ObjectParameter("dtFrom", typeof(System.DateTime));
    
            var dtToParameter = dtTo.HasValue ?
                new ObjectParameter("dtTo", dtTo) :
                new ObjectParameter("dtTo", typeof(System.DateTime));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var keyWordParameter = keyWord != null ?
                new ObjectParameter("KeyWord", keyWord) :
                new ObjectParameter("KeyWord", typeof(string));
    
            var oRRoomIdParameter = oRRoomId.HasValue ?
                new ObjectParameter("ORRoomId", oRRoomId) :
                new ObjectParameter("ORRoomId", typeof(int));
    
            var hpServiceIdParameter = hpServiceId.HasValue ?
                new ObjectParameter("HpServiceId", hpServiceId) :
                new ObjectParameter("HpServiceId", typeof(int));
    
            var hospitalCodeParameter = hospitalCode != null ?
                new ObjectParameter("HospitalCode", hospitalCode) :
                new ObjectParameter("HospitalCode", typeof(string));
    
            var sourceClientIdParameter = sourceClientId.HasValue ?
                new ObjectParameter("SourceClientId", sourceClientId) :
                new ObjectParameter("SourceClientId", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OR_Get_AnesthProgress_PublicInfo_Result>("OR_Get_AnesthProgress_PublicInfo", dtFromParameter, dtToParameter, stateParameter, keyWordParameter, oRRoomIdParameter, hpServiceIdParameter, hospitalCodeParameter, sourceClientIdParameter, currentUserIdParameter);
        }
    
        public virtual ObjectResult<OR_Get_AnesthProgress_test_Result> OR_Get_AnesthProgress_test(Nullable<System.DateTime> dtFrom, Nullable<System.DateTime> dtTo, Nullable<int> state, string keyWord, Nullable<int> oRRoomId, Nullable<int> hpServiceId, string hospitalCode, Nullable<int> sourceClientId, Nullable<int> currentUserId, Nullable<int> isDashboard)
        {
            var dtFromParameter = dtFrom.HasValue ?
                new ObjectParameter("dtFrom", dtFrom) :
                new ObjectParameter("dtFrom", typeof(System.DateTime));
    
            var dtToParameter = dtTo.HasValue ?
                new ObjectParameter("dtTo", dtTo) :
                new ObjectParameter("dtTo", typeof(System.DateTime));
    
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var keyWordParameter = keyWord != null ?
                new ObjectParameter("KeyWord", keyWord) :
                new ObjectParameter("KeyWord", typeof(string));
    
            var oRRoomIdParameter = oRRoomId.HasValue ?
                new ObjectParameter("ORRoomId", oRRoomId) :
                new ObjectParameter("ORRoomId", typeof(int));
    
            var hpServiceIdParameter = hpServiceId.HasValue ?
                new ObjectParameter("HpServiceId", hpServiceId) :
                new ObjectParameter("HpServiceId", typeof(int));
    
            var hospitalCodeParameter = hospitalCode != null ?
                new ObjectParameter("HospitalCode", hospitalCode) :
                new ObjectParameter("HospitalCode", typeof(string));
    
            var sourceClientIdParameter = sourceClientId.HasValue ?
                new ObjectParameter("SourceClientId", sourceClientId) :
                new ObjectParameter("SourceClientId", typeof(int));
    
            var currentUserIdParameter = currentUserId.HasValue ?
                new ObjectParameter("CurrentUserId", currentUserId) :
                new ObjectParameter("CurrentUserId", typeof(int));
    
            var isDashboardParameter = isDashboard.HasValue ?
                new ObjectParameter("IsDashboard", isDashboard) :
                new ObjectParameter("IsDashboard", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OR_Get_AnesthProgress_test_Result>("OR_Get_AnesthProgress_test", dtFromParameter, dtToParameter, stateParameter, keyWordParameter, oRRoomIdParameter, hpServiceIdParameter, hospitalCodeParameter, sourceClientIdParameter, currentUserIdParameter, isDashboardParameter);
        }
    
        public virtual ObjectResult<OR_Get_HpService_GetInfo_Result> OR_Get_HpService_GetInfo(Nullable<int> state, string keyWord, Nullable<int> hpServiceId, string hospitalCode, Nullable<int> sourceClientId, Nullable<int> pageIndex, Nullable<int> pageSize)
        {
            var stateParameter = state.HasValue ?
                new ObjectParameter("State", state) :
                new ObjectParameter("State", typeof(int));
    
            var keyWordParameter = keyWord != null ?
                new ObjectParameter("KeyWord", keyWord) :
                new ObjectParameter("KeyWord", typeof(string));
    
            var hpServiceIdParameter = hpServiceId.HasValue ?
                new ObjectParameter("HpServiceId", hpServiceId) :
                new ObjectParameter("HpServiceId", typeof(int));
    
            var hospitalCodeParameter = hospitalCode != null ?
                new ObjectParameter("HospitalCode", hospitalCode) :
                new ObjectParameter("HospitalCode", typeof(string));
    
            var sourceClientIdParameter = sourceClientId.HasValue ?
                new ObjectParameter("SourceClientId", sourceClientId) :
                new ObjectParameter("SourceClientId", typeof(int));
    
            var pageIndexParameter = pageIndex.HasValue ?
                new ObjectParameter("PageIndex", pageIndex) :
                new ObjectParameter("PageIndex", typeof(int));
    
            var pageSizeParameter = pageSize.HasValue ?
                new ObjectParameter("PageSize", pageSize) :
                new ObjectParameter("PageSize", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<OR_Get_HpService_GetInfo_Result>("OR_Get_HpService_GetInfo", stateParameter, keyWordParameter, hpServiceIdParameter, hospitalCodeParameter, sourceClientIdParameter, pageIndexParameter, pageSizeParameter);
        }
    }
}
